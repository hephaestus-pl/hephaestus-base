module ConfigurationKnowledge.Parsers.SkelCK where

-- Haskell module generated by the BNF converter

import ConfigurationKnowledge.Parsers.AbsCK
import ConfigurationKnowledge.Parsers.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transConfigurationKnowledge :: ConfigurationKnowledge -> Result
transConfigurationKnowledge x = case x of
  TConfigurationKnowledge configurationitems  -> failure x


transConfigurationItem :: ConfigurationItem -> Result
transConfigurationItem x = case x of
  TConfigurationItem featureexp transformations  -> failure x


transTransformation :: Transformation -> Result
transTransformation x = case x of
  TSelectScenario scenarioids  -> failure x
  TEvaluateAdvice adviceids  -> failure x


transScenarioId :: ScenarioId -> Result
transScenarioId x = case x of
  TScenarioId id  -> failure x


transAdviceId :: AdviceId -> Result
transAdviceId x = case x of
  TAdviceId id  -> failure x


transFeatureExp :: FeatureExp -> Result
transFeatureExp x = case x of
  TBasicExp id  -> failure x
  TAndExp featureexp0 featureexp  -> failure x
  TOrExp featureexp0 featureexp  -> failure x
  TNotExp featureexp  -> failure x



