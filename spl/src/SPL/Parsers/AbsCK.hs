module ConfigurationKnowledge.Parsers.AbsCK where

-- Haskell module generated by the BNF converter

newtype Ident = Ident String deriving (Eq,Ord,Show)
data ConfigurationKnowledge =
   TConfigurationKnowledge [ConfigurationItem]
  deriving (Eq,Ord,Show)

data ConfigurationItem =
   TConfigurationItem FeatureExp [Transformation]
  deriving (Eq,Ord,Show)

data Transformation =
   TSelectScenario [ScenarioId]
 | TEvaluateAdvice [AdviceId]
 | TBindParameter Ident Ident
  deriving (Eq,Ord,Show)

data ScenarioId =
   TScenarioId Ident
  deriving (Eq,Ord,Show)

data AdviceId =
   TAdviceId Ident
  deriving (Eq,Ord,Show)

data FeatureExp =
   TBasicExp Ident
 | TAndExp FeatureExp FeatureExp
 | TOrExp FeatureExp FeatureExp
 | TNotExp FeatureExp
  deriving (Eq,Ord,Show)

