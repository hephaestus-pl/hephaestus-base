module SPL.Parsers.AbsCK where

-- Haskell module generated by the BNF converter


newtype Ident = Ident String deriving (Eq,Ord,Show)
data ConfigurationKnowledge =
   TConfigurationKnowledge [ConfigurationItem]
  deriving (Eq,Ord,Show)

data ConfigurationItem =
   TBasicConfigurationItem FeatureExp [Transformation]
 | TConstrainedConfigurationItem FeatureExp [Transformation] FeatureExp FeatureExp
  deriving (Eq,Ord,Show)

data Transformation =
   TSelectScenario [Id]
 | TEvaluateAdvice [Id]
 | TBindParameter Ident Ident
 | TSelectComponents [Id]
 | TSelectAndMoveComponent Id Id
 | TSelectBuildEntries [Id]
  deriving (Eq,Ord,Show)

data Id =
   TId Ident
  deriving (Eq,Ord,Show)

data FeatureExp =
   TBasicExp Ident
 | TAndExp FeatureExp FeatureExp
 | TOrExp FeatureExp FeatureExp
 | TNotExp FeatureExp
  deriving (Eq,Ord,Show)

