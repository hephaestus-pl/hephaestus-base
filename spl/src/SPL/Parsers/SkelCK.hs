module SPL.Parsers.SkelCK where

-- Haskell module generated by the BNF converter

import SPL.Parsers.AbsCK
import SPL.Parsers.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transConfigurationKnowledge :: ConfigurationKnowledge -> Result
transConfigurationKnowledge x = case x of
  TConfigurationKnowledge configurationitems  -> failure x


transConfigurationItem :: ConfigurationItem -> Result
transConfigurationItem x = case x of
  TBasicConfigurationItem featureexp transformations  -> failure x
  TConstrainedConfigurationItem featureexp1 transformations2 featureexp3 featureexp4  -> failure x


transTransformation :: Transformation -> Result
transTransformation x = case x of
  TSelectScenario ids  -> failure x
  TEvaluateAdvice ids  -> failure x
  TBindParameter id1 id2  -> failure x
  TSelectComponents ids  -> failure x
  TSelectAndMoveComponent id1 id2  -> failure x
  TSelectBuildEntries ids  -> failure x


transId :: Id -> Result
transId x = case x of
  TId id  -> failure x


transFeatureExp :: FeatureExp -> Result
transFeatureExp x = case x of
  TBasicExp id  -> failure x
  TAndExp featureexp1 featureexp2  -> failure x
  TOrExp featureexp1 featureexp2  -> failure x
  TNotExp featureexp  -> failure x



