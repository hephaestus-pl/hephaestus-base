module UseCaseModel.Parsers.BNFC.SkelUCM where

-- Haskell module generated by the BNF converter

import UseCaseModel.Parsers.BNFC.AbsUCM
import UseCaseModel.Parsers.BNFC.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transAdvice :: Advice -> Result
transAdvice x = case x of
  TBeforeAdvice advicedec  -> failure x
  TAfterAdvice advicedec  -> failure x
  TAroundAdvice advicedec  -> failure x


transAdviceDec :: AdviceDec -> Result
transAdviceDec x = case x of
  TAdviceDec advid advdesc flow  -> failure x


transAdvId :: AdvId -> Result
transAdvId x = case x of
  TAdvId id  -> failure x


transAdvDesc :: AdvDesc -> Result
transAdvDesc x = case x of
  TAdvDesc str  -> failure x


transFlow :: Flow -> Result
transFlow x = case x of
  TFlow steps  -> failure x


transStep :: Step -> Result
transStep x = case x of
  TBasicStep stepid action system response  -> failure x
  TProceed  -> failure x


transAction :: Action -> Result
transAction x = case x of
  TAction str  -> failure x


transSystem :: System -> Result
transSystem x = case x of
  TSystem str  -> failure x


transResponse :: Response -> Result
transResponse x = case x of
  TResponse str  -> failure x


transStepId :: StepId -> Result
transStepId x = case x of
  TStepId id  -> failure x



