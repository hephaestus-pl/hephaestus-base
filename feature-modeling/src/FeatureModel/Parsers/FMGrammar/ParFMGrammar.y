-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module FeatureModel.Parsers.FMGrammar.ParFMGrammar where
import FeatureModel.Parsers.FMGrammar.AbsFMGrammar
import FeatureModel.Parsers.FMGrammar.LexFMGrammar
import FeatureModel.Parsers.FMGrammar.ErrM

}

%name pFMGrammar FMGrammar
%name pProduction Production
%name pChild Child
%name pOption Option
%name pExpression Expression
%name pListOption ListOption
%name pListProduction ListProduction
%name pListChild ListChild
%name pListExpression ListExpression

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token
  '!' { PT _ (TS _ 1) }
  '&' { PT _ (TS _ 2) }
  '(' { PT _ (TS _ 3) }
  ')' { PT _ (TS _ 4) }
  ')+' { PT _ (TS _ 5) }
  '->' { PT _ (TS _ 6) }
  ':' { PT _ (TS _ 7) }
  ';/' { PT _ (TS _ 8) }
  '<->' { PT _ (TS _ 9) }
  '?' { PT _ (TS _ 10) }
  '|' { PT _ (TS _ 11) }

L_ident  { PT _ (TV $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }

FMGrammar :: { FMGrammar }
FMGrammar : ListProduction ListExpression { FMGrammar (reverse $1) $2 } 


Production :: { Production }
Production : Ident ':' ListChild ';/' { BaseProduction $1 (reverse $3) } 
  | Ident ':' '(' ListOption ')' ';/' { XorProduction $1 $4 }
  | Ident ':' '(' ListOption ')+' ';/' { OrProduction $1 $4 }


Child :: { Child }
Child : Ident { MandatoryChild $1 } 
  | Ident '?' { OptionalChild $1 }


Option :: { Option }
Option : Ident { Option $1 } 


Expression :: { Expression }
Expression : Ident { BasicExp $1 } 
  | '(' Expression '->' Expression ')' { ImpliesExp $2 $4 }
  | '(' Expression '<->' Expression ')' { IffExp $2 $4 }
  | '(' Expression '&' Expression ')' { AndExp $2 $4 }
  | '(' Expression '|' Expression ')' { OrExp $2 $4 }
  | '!' Expression { NotExp $2 }


ListOption :: { [Option] }
ListOption : {- empty -} { [] } 
  | Option { (:[]) $1 }
  | Option '|' ListOption { (:) $1 $3 }


ListProduction :: { [Production] }
ListProduction : {- empty -} { [] } 
  | ListProduction Production { flip (:) $1 $2 }


ListChild :: { [Child] }
ListChild : {- empty -} { [] } 
  | ListChild Child { flip (:) $1 $2 }


ListExpression :: { [Expression] }
ListExpression : {- empty -} { [] } 
  | Expression { (:[]) $1 }
  | Expression ';/' ListExpression { (:) $1 $3 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

