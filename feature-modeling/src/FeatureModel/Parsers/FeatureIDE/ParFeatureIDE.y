-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module FeatureModel.Parsers.FeatureIDE.ParFeatureIDE where
import FeatureModel.Parsers.FeatureIDE.AbsFeatureIDE
import FeatureModel.Parsers.FeatureIDE.LexFeatureIDE
import FeatureModel.Parsers.FeatureIDE.ErrM

}

%name pFeatureModel FeatureModel
%name pHeader Header
%name pFeatureTree FeatureTree
%name pFeature Feature
%name pAbstractField AbstractField
%name pMandatoryField MandatoryField
%name pBooleanValue BooleanValue
%name pTail Tail
%name pListFeature ListFeature

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token
  '\"false\"' { PT _ (TS _ 1) }
  '\"true\"' { PT _ (TS _ 2) }
  '/>' { PT _ (TS _ 3) }
  '</alt>' { PT _ (TS _ 4) }
  '</and>' { PT _ (TS _ 5) }
  '</featureModel>' { PT _ (TS _ 6) }
  '</or>' { PT _ (TS _ 7) }
  '</struct>' { PT _ (TS _ 8) }
  '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>' { PT _ (TS _ 9) }
  '<alt' { PT _ (TS _ 10) }
  '<and' { PT _ (TS _ 11) }
  '<calculations Auto=\"true\" Constraints=\"true\" Features=\"true\" Redundant=\"true\"/>' { PT _ (TS _ 12) }
  '<comments/>' { PT _ (TS _ 13) }
  '<feature' { PT _ (TS _ 14) }
  '<featureModel chosenLayoutAlgorithm=\"1\">' { PT _ (TS _ 15) }
  '<featureOrder userDefined=\"false\"/>' { PT _ (TS _ 16) }
  '<or' { PT _ (TS _ 17) }
  '<struct>' { PT _ (TS _ 18) }
  '=' { PT _ (TS _ 19) }
  '>' { PT _ (TS _ 20) }
  'abstract' { PT _ (TS _ 21) }
  'mandatory' { PT _ (TS _ 22) }
  'name' { PT _ (TS _ 23) }

L_quoted { PT _ (TL $$) }


%%

String  :: { String }  : L_quoted {  $1 }

FeatureModel :: { FeatureModel }
FeatureModel : Header FeatureTree Tail { FeatureModel $1 $2 $3 } 


Header :: { Header }
Header : '<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>' '<featureModel chosenLayoutAlgorithm=\"1\">' { Header } 


FeatureTree :: { FeatureTree }
FeatureTree : '<struct>' Feature '</struct>' { FeatureTree $2 } 


Feature :: { Feature }
Feature : '<feature' AbstractField MandatoryField 'name' '=' String '/>' { Feature $2 $3 $6 } 
  | '<and' AbstractField MandatoryField 'name' '=' String '>' ListFeature '</and>' { AndFeature $2 $3 $6 (reverse $8) }
  | '<alt' AbstractField MandatoryField 'name' '=' String '>' ListFeature '</alt>' { AltFeature $2 $3 $6 (reverse $8) }
  | '<or' AbstractField MandatoryField 'name' '=' String '>' ListFeature '</or>' { OrFeature $2 $3 $6 (reverse $8) }


AbstractField :: { AbstractField }
AbstractField : 'abstract' '=' BooleanValue { AbstractField $3 } 
  | {- empty -} { NoAbstractFiel }


MandatoryField :: { MandatoryField }
MandatoryField : 'mandatory' '=' BooleanValue { MandatoryField $3 } 
  | {- empty -} { NoMandatoryField }


BooleanValue :: { BooleanValue }
BooleanValue : '\"true\"' { TrueValue } 
  | '\"false\"' { FalseValue }


Tail :: { Tail }
Tail : '<calculations Auto=\"true\" Constraints=\"true\" Features=\"true\" Redundant=\"true\"/>' '<comments/>' '<featureOrder userDefined=\"false\"/>' '</featureModel>' { Tail } 


ListFeature :: { [Feature] }
ListFeature : {- empty -} { [] } 
  | ListFeature Feature { flip (:) $1 $2 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

