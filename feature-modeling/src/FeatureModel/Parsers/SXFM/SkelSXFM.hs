module FeatureModel.Parsers.SXFM.SkelSXFM where

-- Haskell module generated by the BNF converter

import FeatureModel.Parsers.SXFM.AbsSXFM
import FeatureModel.Parsers.SXFM.ErrM
type Result = Err String

failure :: Show a => a -> Result
failure x = Bad $ "Undefined case: " ++ show x

transIdent :: Ident -> Result
transIdent x = case x of
  Ident str  -> failure x


transSxFM :: SxFM -> Result
transSxFM x = case x of
  TSxFM sxfeatureroot  -> failure x


transSxFeatureRoot :: SxFeatureRoot -> Result
transSxFeatureRoot x = case x of
  TSxFeatureRoot sxfeaturename sxfeatureid sxfeatures  -> failure x


transSxFeatureName :: SxFeatureName -> Result
transSxFeatureName x = case x of
  TSxFeatureName id  -> failure x


transSxFeatureId :: SxFeatureId -> Result
transSxFeatureId x = case x of
  TSxFeatureId id  -> failure x


transSxFeature :: SxFeature -> Result
transSxFeature x = case x of
  TSxMandatoryFeature sxfeaturename sxfeatures  -> failure x
  TSxOptionalFeature sxfeaturename sxfeatures  -> failure x
  TSxAlternativeFeature sxoptions  -> failure x
  TSxOrFeature sxoptions  -> failure x


transSxOption :: SxOption -> Result
transSxOption x = case x of
  TSxOption id1 id2 sxfeatures3  -> failure x



