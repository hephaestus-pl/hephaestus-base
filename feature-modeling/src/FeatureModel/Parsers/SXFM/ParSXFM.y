-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module FeatureModel.Parsers.SXFM.ParSXFM where
import FeatureModel.Parsers.SXFM.AbsSXFM
import FeatureModel.Parsers.SXFM.LexSXFM
import FeatureModel.Parsers.SXFM.ErrM

}

%name pSxFM SxFM
%name pSxFeatureRoot SxFeatureRoot
%name pSxFeatureName SxFeatureName
%name pSxFeatureId SxFeatureId
%name pSxFeature SxFeature
%name pSxOption SxOption
%name pListSxFeature ListSxFeature
%name pListSxOption ListSxOption

-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype { Token }

%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  ':g [1,*]' { PT _ (TS _ 3) }
  ':g [1,1]' { PT _ (TS _ 4) }
  ':m' { PT _ (TS _ 5) }
  ':o' { PT _ (TS _ 6) }
  ':option' { PT _ (TS _ 7) }
  ':r' { PT _ (TS _ 8) }

L_ident  { PT _ (TV $$) }


%%

Ident   :: { Ident }   : L_ident  { Ident $1 }

SxFM :: { SxFM }
SxFM : SxFeatureRoot { TSxFM $1 } 


SxFeatureRoot :: { SxFeatureRoot }
SxFeatureRoot : ':r' SxFeatureName SxFeatureId '(' ListSxFeature ')' { TSxFeatureRoot $2 $3 (reverse $5) } 


SxFeatureName :: { SxFeatureName }
SxFeatureName : Ident { TSxFeatureName $1 } 


SxFeatureId :: { SxFeatureId }
SxFeatureId : '(' Ident ')' { TSxFeatureId $2 } 


SxFeature :: { SxFeature }
SxFeature : ':m' SxFeatureName '(' ListSxFeature ')' { TSxMandatoryFeature $2 (reverse $4) } 
  | ':o' SxFeatureName '(' ListSxFeature ')' { TSxOptionalFeature $2 (reverse $4) }
  | ':g [1,1]' '(' ListSxOption ')' { TSxAlternativeFeature (reverse $3) }
  | ':g [1,*]' '(' ListSxOption ')' { TSxOrFeature (reverse $3) }


SxOption :: { SxOption }
SxOption : ':option' Ident '(' Ident ')' '(' ListSxFeature ')' { TSxOption $2 $4 (reverse $7) } 


ListSxFeature :: { [SxFeature] }
ListSxFeature : {- empty -} { [] } 
  | ListSxFeature SxFeature { flip (:) $1 $2 }


ListSxOption :: { [SxOption] }
ListSxOption : {- empty -} { [] } 
  | ListSxOption SxOption { flip (:) $1 $2 }



{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

