

module FeatureModel.Parsers.FMIde.AbsFMIde where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq,Ord,Show,Read)
data Grammar =
   TGrammar [Production] [Expression]
  deriving (Eq,Ord,Show,Read)

data Production =
   TBaseProduction BaseProd [Term] ProdName
 | TAltProduction AltProd [Option]
  deriving (Eq,Ord,Show,Read)

data BaseProd =
   TBaseProd Ident
  deriving (Eq,Ord,Show,Read)

data AltProd =
   TAltProd Ident
  deriving (Eq,Ord,Show,Read)

data ProdName =
   TProdName Ident
 | TProdNameL Ident
 | TProdNameR Ident
  deriving (Eq,Ord,Show,Read)

data Term =
   TTerm Ident
 | TOptionalTerm Ident
 | TOrTerm Ident
 | TXorTerm Ident
  deriving (Eq,Ord,Show,Read)

data Option =
   TOption Ident
  deriving (Eq,Ord,Show,Read)

data Expression =
   BasicExp Ident
 | OrExp Expression Expression
 | AndExp Expression Expression
 | NotExp Expression
 | ImpliesExp Expression Expression
  deriving (Eq,Ord,Show,Read)

